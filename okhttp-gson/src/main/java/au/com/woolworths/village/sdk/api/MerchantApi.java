/*
 * Village Wallet
 * APIs for Village Wallet
 *
 * The version of the OpenAPI document: 0.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package au.com.woolworths.village.sdk.api;

import au.com.woolworths.village.sdk.client.ApiCallback;
import au.com.woolworths.village.sdk.client.ApiClient;
import au.com.woolworths.village.sdk.client.ApiException;
import au.com.woolworths.village.sdk.client.ApiResponse;
import au.com.woolworths.village.sdk.client.Configuration;
import au.com.woolworths.village.sdk.client.Pair;
import au.com.woolworths.village.sdk.client.ProgressRequestBody;
import au.com.woolworths.village.sdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import au.com.woolworths.village.sdk.dto.CreateMerchantSchemaResults;
import au.com.woolworths.village.sdk.dto.CreatePaymentQRCodeResults;
import au.com.woolworths.village.sdk.dto.CreatePaymentRequestResults;
import au.com.woolworths.village.sdk.dto.CustomerPreferencesResult;
import au.com.woolworths.village.sdk.dto.Error;
import au.com.woolworths.village.sdk.dto.GetMerchantPaymentDetailsResults;
import au.com.woolworths.village.sdk.dto.GetMerchantPaymentsResults;
import au.com.woolworths.village.sdk.dto.GetMerchantTransactionDetailsResults;
import au.com.woolworths.village.sdk.dto.GetMerchantTransactionsResults;
import au.com.woolworths.village.sdk.dto.MerchantPaymentRequest;
import au.com.woolworths.village.sdk.dto.MerchantPreferences;
import au.com.woolworths.village.sdk.dto.MerchantSchema;
import au.com.woolworths.village.sdk.dto.MerchantSchemaDetailsResult;
import au.com.woolworths.village.sdk.dto.MerchantSchemaResult;
import au.com.woolworths.village.sdk.dto.PaymentQRCodeDetails;
import au.com.woolworths.village.sdk.dto.RefundMerchantTransactionRequest;
import au.com.woolworths.village.sdk.dto.RefundMerchantTransactionResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MerchantApi {
    private ApiClient localVarApiClient;

    public MerchantApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MerchantApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for cancelPaymentQRCode
     * @param qrId The ID of the specific QR Code (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> QR code has been successfully expired.  Not content returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The QR code specified doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelPaymentQRCodeCall(String qrId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchant/qr/{qrId}"
            .replaceAll("\\{" + "qrId" + "\\}", localVarApiClient.escapeString(qrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelPaymentQRCodeValidateBeforeCall(String qrId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'qrId' is set
        if (qrId == null) {
            throw new ApiException("Missing the required parameter 'qrId' when calling cancelPaymentQRCode(Async)");
        }
        

        okhttp3.Call localVarCall = cancelPaymentQRCodeCall(qrId, _callback);
        return localVarCall;

    }

    /**
     * Invalidate QR Code
     * Cancel an existing QC code.  Effectively expires the QR code
     * @param qrId The ID of the specific QR Code (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> QR code has been successfully expired.  Not content returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The QR code specified doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public void cancelPaymentQRCode(String qrId) throws ApiException {
        cancelPaymentQRCodeWithHttpInfo(qrId);
    }

    /**
     * Invalidate QR Code
     * Cancel an existing QC code.  Effectively expires the QR code
     * @param qrId The ID of the specific QR Code (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> QR code has been successfully expired.  Not content returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The QR code specified doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelPaymentQRCodeWithHttpInfo(String qrId) throws ApiException {
        okhttp3.Call localVarCall = cancelPaymentQRCodeValidateBeforeCall(qrId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Invalidate QR Code (asynchronously)
     * Cancel an existing QC code.  Effectively expires the QR code
     * @param qrId The ID of the specific QR Code (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> QR code has been successfully expired.  Not content returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The QR code specified doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelPaymentQRCodeAsync(String qrId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelPaymentQRCodeValidateBeforeCall(qrId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMerchantSchema
     * @param merchantSchema  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMerchantSchemaCall(MerchantSchema merchantSchema, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = merchantSchema;

        // create path and map variables
        String localVarPath = "/merchant/schema";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMerchantSchemaValidateBeforeCall(MerchantSchema merchantSchema, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'merchantSchema' is set
        if (merchantSchema == null) {
            throw new ApiException("Missing the required parameter 'merchantSchema' when calling createMerchantSchema(Async)");
        }
        

        okhttp3.Call localVarCall = createMerchantSchemaCall(merchantSchema, _callback);
        return localVarCall;

    }

    /**
     * Add Schema
     * Add a new schema that can be used in schema based payloads for this merchant
     * @param merchantSchema  (required)
     * @return CreateMerchantSchemaResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CreateMerchantSchemaResults createMerchantSchema(MerchantSchema merchantSchema) throws ApiException {
        ApiResponse<CreateMerchantSchemaResults> localVarResp = createMerchantSchemaWithHttpInfo(merchantSchema);
        return localVarResp.getData();
    }

    /**
     * Add Schema
     * Add a new schema that can be used in schema based payloads for this merchant
     * @param merchantSchema  (required)
     * @return ApiResponse&lt;CreateMerchantSchemaResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateMerchantSchemaResults> createMerchantSchemaWithHttpInfo(MerchantSchema merchantSchema) throws ApiException {
        okhttp3.Call localVarCall = createMerchantSchemaValidateBeforeCall(merchantSchema, null);
        Type localVarReturnType = new TypeToken<CreateMerchantSchemaResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Schema (asynchronously)
     * Add a new schema that can be used in schema based payloads for this merchant
     * @param merchantSchema  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMerchantSchemaAsync(MerchantSchema merchantSchema, final ApiCallback<CreateMerchantSchemaResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMerchantSchemaValidateBeforeCall(merchantSchema, _callback);
        Type localVarReturnType = new TypeToken<CreateMerchantSchemaResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPaymentQRCode
     * @param paymentQRCodeDetails  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified payment request doesn&#39;t exist or has already been closed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentQRCodeCall(PaymentQRCodeDetails paymentQRCodeDetails, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = paymentQRCodeDetails;

        // create path and map variables
        String localVarPath = "/merchant/qr";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentQRCodeValidateBeforeCall(PaymentQRCodeDetails paymentQRCodeDetails, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentQRCodeDetails' is set
        if (paymentQRCodeDetails == null) {
            throw new ApiException("Missing the required parameter 'paymentQRCodeDetails' when calling createPaymentQRCode(Async)");
        }
        

        okhttp3.Call localVarCall = createPaymentQRCodeCall(paymentQRCodeDetails, _callback);
        return localVarCall;

    }

    /**
     * Create QR Code
     * Create a new QR code for an existing payment
     * @param paymentQRCodeDetails  (required)
     * @return CreatePaymentQRCodeResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified payment request doesn&#39;t exist or has already been closed </td><td>  -  </td></tr>
     </table>
     */
    public CreatePaymentQRCodeResults createPaymentQRCode(PaymentQRCodeDetails paymentQRCodeDetails) throws ApiException {
        ApiResponse<CreatePaymentQRCodeResults> localVarResp = createPaymentQRCodeWithHttpInfo(paymentQRCodeDetails);
        return localVarResp.getData();
    }

    /**
     * Create QR Code
     * Create a new QR code for an existing payment
     * @param paymentQRCodeDetails  (required)
     * @return ApiResponse&lt;CreatePaymentQRCodeResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified payment request doesn&#39;t exist or has already been closed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePaymentQRCodeResults> createPaymentQRCodeWithHttpInfo(PaymentQRCodeDetails paymentQRCodeDetails) throws ApiException {
        okhttp3.Call localVarCall = createPaymentQRCodeValidateBeforeCall(paymentQRCodeDetails, null);
        Type localVarReturnType = new TypeToken<CreatePaymentQRCodeResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create QR Code (asynchronously)
     * Create a new QR code for an existing payment
     * @param paymentQRCodeDetails  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified payment request doesn&#39;t exist or has already been closed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentQRCodeAsync(PaymentQRCodeDetails paymentQRCodeDetails, final ApiCallback<CreatePaymentQRCodeResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentQRCodeValidateBeforeCall(paymentQRCodeDetails, _callback);
        Type localVarReturnType = new TypeToken<CreatePaymentQRCodeResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPaymentRequest
     * @param merchantPaymentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentRequestCall(MerchantPaymentRequest merchantPaymentRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = merchantPaymentRequest;

        // create path and map variables
        String localVarPath = "/merchant/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentRequestValidateBeforeCall(MerchantPaymentRequest merchantPaymentRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'merchantPaymentRequest' is set
        if (merchantPaymentRequest == null) {
            throw new ApiException("Missing the required parameter 'merchantPaymentRequest' when calling createPaymentRequest(Async)");
        }
        

        okhttp3.Call localVarCall = createPaymentRequestCall(merchantPaymentRequest, _callback);
        return localVarCall;

    }

    /**
     * Create Payment
     * Create a new payment request that can then be presented to a customer for payment
     * @param merchantPaymentRequest  (required)
     * @return CreatePaymentRequestResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CreatePaymentRequestResults createPaymentRequest(MerchantPaymentRequest merchantPaymentRequest) throws ApiException {
        ApiResponse<CreatePaymentRequestResults> localVarResp = createPaymentRequestWithHttpInfo(merchantPaymentRequest);
        return localVarResp.getData();
    }

    /**
     * Create Payment
     * Create a new payment request that can then be presented to a customer for payment
     * @param merchantPaymentRequest  (required)
     * @return ApiResponse&lt;CreatePaymentRequestResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePaymentRequestResults> createPaymentRequestWithHttpInfo(MerchantPaymentRequest merchantPaymentRequest) throws ApiException {
        okhttp3.Call localVarCall = createPaymentRequestValidateBeforeCall(merchantPaymentRequest, null);
        Type localVarReturnType = new TypeToken<CreatePaymentRequestResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Payment (asynchronously)
     * Create a new payment request that can then be presented to a customer for payment
     * @param merchantPaymentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentRequestAsync(MerchantPaymentRequest merchantPaymentRequest, final ApiCallback<CreatePaymentRequestResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentRequestValidateBeforeCall(merchantPaymentRequest, _callback);
        Type localVarReturnType = new TypeToken<CreatePaymentRequestResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMerchantPayment
     * @param paymentRequestId The ID of the specific payment request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Payment request has been successfully expired.  Not content returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The payment request specified doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMerchantPaymentCall(String paymentRequestId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchant/payments/{paymentRequestId}"
            .replaceAll("\\{" + "paymentRequestId" + "\\}", localVarApiClient.escapeString(paymentRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMerchantPaymentValidateBeforeCall(String paymentRequestId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentRequestId' is set
        if (paymentRequestId == null) {
            throw new ApiException("Missing the required parameter 'paymentRequestId' when calling deleteMerchantPayment(Async)");
        }
        

        okhttp3.Call localVarCall = deleteMerchantPaymentCall(paymentRequestId, _callback);
        return localVarCall;

    }

    /**
     * Delete Payment
     * Cancel an existing payment by setting the expiration date/time to now and setting the remaining uses to 0.  Will only be successful if the payment is still pending.  Completed payments need to be refunded using the dedicated API for that purpose
     * @param paymentRequestId The ID of the specific payment request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Payment request has been successfully expired.  Not content returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The payment request specified doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMerchantPayment(String paymentRequestId) throws ApiException {
        deleteMerchantPaymentWithHttpInfo(paymentRequestId);
    }

    /**
     * Delete Payment
     * Cancel an existing payment by setting the expiration date/time to now and setting the remaining uses to 0.  Will only be successful if the payment is still pending.  Completed payments need to be refunded using the dedicated API for that purpose
     * @param paymentRequestId The ID of the specific payment request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Payment request has been successfully expired.  Not content returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The payment request specified doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMerchantPaymentWithHttpInfo(String paymentRequestId) throws ApiException {
        okhttp3.Call localVarCall = deleteMerchantPaymentValidateBeforeCall(paymentRequestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Payment (asynchronously)
     * Cancel an existing payment by setting the expiration date/time to now and setting the remaining uses to 0.  Will only be successful if the payment is still pending.  Completed payments need to be refunded using the dedicated API for that purpose
     * @param paymentRequestId The ID of the specific payment request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Payment request has been successfully expired.  Not content returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The payment request specified doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMerchantPaymentAsync(String paymentRequestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMerchantPaymentValidateBeforeCall(paymentRequestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMerchantPaymentDetails
     * @param paymentRequestId The ID of the specific payment request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified Payment Request ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantPaymentDetailsCall(String paymentRequestId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchant/payments/{paymentRequestId}"
            .replaceAll("\\{" + "paymentRequestId" + "\\}", localVarApiClient.escapeString(paymentRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantPaymentDetailsValidateBeforeCall(String paymentRequestId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentRequestId' is set
        if (paymentRequestId == null) {
            throw new ApiException("Missing the required parameter 'paymentRequestId' when calling getMerchantPaymentDetails(Async)");
        }
        

        okhttp3.Call localVarCall = getMerchantPaymentDetailsCall(paymentRequestId, _callback);
        return localVarCall;

    }

    /**
     * Get Payment Details
     * Get the details for a specific payment.  Provides all types of payments and all payment content
     * @param paymentRequestId The ID of the specific payment request (required)
     * @return GetMerchantPaymentDetailsResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified Payment Request ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public GetMerchantPaymentDetailsResults getMerchantPaymentDetails(String paymentRequestId) throws ApiException {
        ApiResponse<GetMerchantPaymentDetailsResults> localVarResp = getMerchantPaymentDetailsWithHttpInfo(paymentRequestId);
        return localVarResp.getData();
    }

    /**
     * Get Payment Details
     * Get the details for a specific payment.  Provides all types of payments and all payment content
     * @param paymentRequestId The ID of the specific payment request (required)
     * @return ApiResponse&lt;GetMerchantPaymentDetailsResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified Payment Request ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMerchantPaymentDetailsResults> getMerchantPaymentDetailsWithHttpInfo(String paymentRequestId) throws ApiException {
        okhttp3.Call localVarCall = getMerchantPaymentDetailsValidateBeforeCall(paymentRequestId, null);
        Type localVarReturnType = new TypeToken<GetMerchantPaymentDetailsResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payment Details (asynchronously)
     * Get the details for a specific payment.  Provides all types of payments and all payment content
     * @param paymentRequestId The ID of the specific payment request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified Payment Request ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantPaymentDetailsAsync(String paymentRequestId, final ApiCallback<GetMerchantPaymentDetailsResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantPaymentDetailsValidateBeforeCall(paymentRequestId, _callback);
        Type localVarReturnType = new TypeToken<GetMerchantPaymentDetailsResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMerchantPayments
     * @param type The type of payment requests to return: active, inactive or both (optional, default to ACTIVE)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantPaymentsCall(String type, Integer pageSize, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchant/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page-size", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantPaymentsValidateBeforeCall(String type, Integer pageSize, Integer page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getMerchantPaymentsCall(type, pageSize, page, _callback);
        return localVarCall;

    }

    /**
     * Get Payment List
     * Get a list of the payments initiated by the merchant, both pending and complete
     * @param type The type of payment requests to return: active, inactive or both (optional, default to ACTIVE)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @return GetMerchantPaymentsResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetMerchantPaymentsResults getMerchantPayments(String type, Integer pageSize, Integer page) throws ApiException {
        ApiResponse<GetMerchantPaymentsResults> localVarResp = getMerchantPaymentsWithHttpInfo(type, pageSize, page);
        return localVarResp.getData();
    }

    /**
     * Get Payment List
     * Get a list of the payments initiated by the merchant, both pending and complete
     * @param type The type of payment requests to return: active, inactive or both (optional, default to ACTIVE)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @return ApiResponse&lt;GetMerchantPaymentsResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMerchantPaymentsResults> getMerchantPaymentsWithHttpInfo(String type, Integer pageSize, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getMerchantPaymentsValidateBeforeCall(type, pageSize, page, null);
        Type localVarReturnType = new TypeToken<GetMerchantPaymentsResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payment List (asynchronously)
     * Get a list of the payments initiated by the merchant, both pending and complete
     * @param type The type of payment requests to return: active, inactive or both (optional, default to ACTIVE)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantPaymentsAsync(String type, Integer pageSize, Integer page, final ApiCallback<GetMerchantPaymentsResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantPaymentsValidateBeforeCall(type, pageSize, page, _callback);
        Type localVarReturnType = new TypeToken<GetMerchantPaymentsResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMerchantPreferences
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantPreferencesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchant/preferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantPreferencesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getMerchantPreferencesCall(_callback);
        return localVarCall;

    }

    /**
     * Get Preferences
     * Get the preferences previously set by the customer or merchant (depending on calling identity)
     * @return CustomerPreferencesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CustomerPreferencesResult getMerchantPreferences() throws ApiException {
        ApiResponse<CustomerPreferencesResult> localVarResp = getMerchantPreferencesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Preferences
     * Get the preferences previously set by the customer or merchant (depending on calling identity)
     * @return ApiResponse&lt;CustomerPreferencesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerPreferencesResult> getMerchantPreferencesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getMerchantPreferencesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CustomerPreferencesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Preferences (asynchronously)
     * Get the preferences previously set by the customer or merchant (depending on calling identity)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantPreferencesAsync(final ApiCallback<CustomerPreferencesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantPreferencesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CustomerPreferencesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMerchantSchemaDetails
     * @param schemaId The ID of the specific schema to get details for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantSchemaDetailsCall(String schemaId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchant/schema/{schemaId}"
            .replaceAll("\\{" + "schemaId" + "\\}", localVarApiClient.escapeString(schemaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantSchemaDetailsValidateBeforeCall(String schemaId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'schemaId' is set
        if (schemaId == null) {
            throw new ApiException("Missing the required parameter 'schemaId' when calling getMerchantSchemaDetails(Async)");
        }
        

        okhttp3.Call localVarCall = getMerchantSchemaDetailsCall(schemaId, _callback);
        return localVarCall;

    }

    /**
     * Get Schema Details
     * Get the list of currently usable schema previously added for the merchant
     * @param schemaId The ID of the specific schema to get details for (required)
     * @return MerchantSchemaDetailsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public MerchantSchemaDetailsResult getMerchantSchemaDetails(String schemaId) throws ApiException {
        ApiResponse<MerchantSchemaDetailsResult> localVarResp = getMerchantSchemaDetailsWithHttpInfo(schemaId);
        return localVarResp.getData();
    }

    /**
     * Get Schema Details
     * Get the list of currently usable schema previously added for the merchant
     * @param schemaId The ID of the specific schema to get details for (required)
     * @return ApiResponse&lt;MerchantSchemaDetailsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantSchemaDetailsResult> getMerchantSchemaDetailsWithHttpInfo(String schemaId) throws ApiException {
        okhttp3.Call localVarCall = getMerchantSchemaDetailsValidateBeforeCall(schemaId, null);
        Type localVarReturnType = new TypeToken<MerchantSchemaDetailsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Schema Details (asynchronously)
     * Get the list of currently usable schema previously added for the merchant
     * @param schemaId The ID of the specific schema to get details for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantSchemaDetailsAsync(String schemaId, final ApiCallback<MerchantSchemaDetailsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantSchemaDetailsValidateBeforeCall(schemaId, _callback);
        Type localVarReturnType = new TypeToken<MerchantSchemaDetailsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMerchantSchemas
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantSchemasCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchant/schema";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantSchemasValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getMerchantSchemasCall(_callback);
        return localVarCall;

    }

    /**
     * Get Schema List
     * Get the list of currently usable schema previously added for the merchant
     * @return MerchantSchemaResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public MerchantSchemaResult getMerchantSchemas() throws ApiException {
        ApiResponse<MerchantSchemaResult> localVarResp = getMerchantSchemasWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Schema List
     * Get the list of currently usable schema previously added for the merchant
     * @return ApiResponse&lt;MerchantSchemaResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantSchemaResult> getMerchantSchemasWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getMerchantSchemasValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MerchantSchemaResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Schema List (asynchronously)
     * Get the list of currently usable schema previously added for the merchant
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantSchemasAsync(final ApiCallback<MerchantSchemaResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantSchemasValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MerchantSchemaResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMerchantTransactionDetails
     * @param transactionId The ID of the specific transaction (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantTransactionDetailsCall(String transactionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchant/transactions/{transactionId}"
            .replaceAll("\\{" + "transactionId" + "\\}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantTransactionDetailsValidateBeforeCall(String transactionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling getMerchantTransactionDetails(Async)");
        }
        

        okhttp3.Call localVarCall = getMerchantTransactionDetailsCall(transactionId, _callback);
        return localVarCall;

    }

    /**
     * Get Transaction Details
     * Get the details for a specific transaction previously executed with the merchant.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
     * @param transactionId The ID of the specific transaction (required)
     * @return GetMerchantTransactionDetailsResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetMerchantTransactionDetailsResults getMerchantTransactionDetails(String transactionId) throws ApiException {
        ApiResponse<GetMerchantTransactionDetailsResults> localVarResp = getMerchantTransactionDetailsWithHttpInfo(transactionId);
        return localVarResp.getData();
    }

    /**
     * Get Transaction Details
     * Get the details for a specific transaction previously executed with the merchant.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
     * @param transactionId The ID of the specific transaction (required)
     * @return ApiResponse&lt;GetMerchantTransactionDetailsResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMerchantTransactionDetailsResults> getMerchantTransactionDetailsWithHttpInfo(String transactionId) throws ApiException {
        okhttp3.Call localVarCall = getMerchantTransactionDetailsValidateBeforeCall(transactionId, null);
        Type localVarReturnType = new TypeToken<GetMerchantTransactionDetailsResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transaction Details (asynchronously)
     * Get the details for a specific transaction previously executed with the merchant.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
     * @param transactionId The ID of the specific transaction (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantTransactionDetailsAsync(String transactionId, final ApiCallback<GetMerchantTransactionDetailsResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantTransactionDetailsValidateBeforeCall(transactionId, _callback);
        Type localVarReturnType = new TypeToken<GetMerchantTransactionDetailsResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMerchantTransactions
     * @param startTime If present, the date/time to limit transactions returned.  Transactions older than this time will not be returned (optional)
     * @param endTime If present, the date/time to limit transactions returned.  Transactions newer than this time will not be returned (optional)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantTransactionsCall(String startTime, String endTime, Integer pageSize, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchant/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end-time", endTime));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page-size", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantTransactionsValidateBeforeCall(String startTime, String endTime, Integer pageSize, Integer page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getMerchantTransactionsCall(startTime, endTime, pageSize, page, _callback);
        return localVarCall;

    }

    /**
     * Get Transaction List
     * Get a list of the previously executed transactions with the merchant.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
     * @param startTime If present, the date/time to limit transactions returned.  Transactions older than this time will not be returned (optional)
     * @param endTime If present, the date/time to limit transactions returned.  Transactions newer than this time will not be returned (optional)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @return GetMerchantTransactionsResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetMerchantTransactionsResults getMerchantTransactions(String startTime, String endTime, Integer pageSize, Integer page) throws ApiException {
        ApiResponse<GetMerchantTransactionsResults> localVarResp = getMerchantTransactionsWithHttpInfo(startTime, endTime, pageSize, page);
        return localVarResp.getData();
    }

    /**
     * Get Transaction List
     * Get a list of the previously executed transactions with the merchant.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
     * @param startTime If present, the date/time to limit transactions returned.  Transactions older than this time will not be returned (optional)
     * @param endTime If present, the date/time to limit transactions returned.  Transactions newer than this time will not be returned (optional)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @return ApiResponse&lt;GetMerchantTransactionsResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMerchantTransactionsResults> getMerchantTransactionsWithHttpInfo(String startTime, String endTime, Integer pageSize, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getMerchantTransactionsValidateBeforeCall(startTime, endTime, pageSize, page, null);
        Type localVarReturnType = new TypeToken<GetMerchantTransactionsResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transaction List (asynchronously)
     * Get a list of the previously executed transactions with the merchant.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
     * @param startTime If present, the date/time to limit transactions returned.  Transactions older than this time will not be returned (optional)
     * @param endTime If present, the date/time to limit transactions returned.  Transactions newer than this time will not be returned (optional)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantTransactionsAsync(String startTime, String endTime, Integer pageSize, Integer page, final ApiCallback<GetMerchantTransactionsResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantTransactionsValidateBeforeCall(startTime, endTime, pageSize, page, _callback);
        Type localVarReturnType = new TypeToken<GetMerchantTransactionsResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentQRCodeContent
     * @param qrId The ID of the specific QR Code (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified payment request doesn&#39;t exist or has already been closed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentQRCodeContentCall(String qrId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchant/qr/{qrId}"
            .replaceAll("\\{" + "qrId" + "\\}", localVarApiClient.escapeString(qrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "image/png"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentQRCodeContentValidateBeforeCall(String qrId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'qrId' is set
        if (qrId == null) {
            throw new ApiException("Missing the required parameter 'qrId' when calling getPaymentQRCodeContent(Async)");
        }
        

        okhttp3.Call localVarCall = getPaymentQRCodeContentCall(qrId, _callback);
        return localVarCall;

    }

    /**
     * Get QR Code Content
     * Obtain the content or an image for an existing QR code.  If requested content type is application/json then a payload will be returned.  if requested content is image/png an image will be returned
     * @param qrId The ID of the specific QR Code (required)
     * @return CreatePaymentQRCodeResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified payment request doesn&#39;t exist or has already been closed </td><td>  -  </td></tr>
     </table>
     */
    public CreatePaymentQRCodeResults getPaymentQRCodeContent(String qrId) throws ApiException {
        ApiResponse<CreatePaymentQRCodeResults> localVarResp = getPaymentQRCodeContentWithHttpInfo(qrId);
        return localVarResp.getData();
    }

    /**
     * Get QR Code Content
     * Obtain the content or an image for an existing QR code.  If requested content type is application/json then a payload will be returned.  if requested content is image/png an image will be returned
     * @param qrId The ID of the specific QR Code (required)
     * @return ApiResponse&lt;CreatePaymentQRCodeResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified payment request doesn&#39;t exist or has already been closed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePaymentQRCodeResults> getPaymentQRCodeContentWithHttpInfo(String qrId) throws ApiException {
        okhttp3.Call localVarCall = getPaymentQRCodeContentValidateBeforeCall(qrId, null);
        Type localVarReturnType = new TypeToken<CreatePaymentQRCodeResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get QR Code Content (asynchronously)
     * Obtain the content or an image for an existing QR code.  If requested content type is application/json then a payload will be returned.  if requested content is image/png an image will be returned
     * @param qrId The ID of the specific QR Code (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified payment request doesn&#39;t exist or has already been closed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentQRCodeContentAsync(String qrId, final ApiCallback<CreatePaymentQRCodeResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentQRCodeContentValidateBeforeCall(qrId, _callback);
        Type localVarReturnType = new TypeToken<CreatePaymentQRCodeResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for refundMerchantTransaction
     * @param transactionId The ID of the specific transaction to reverse (required)
     * @param refundMerchantTransactionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The transaction specified doesn&#39;t exist or is a refund transaction already </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refundMerchantTransactionCall(String transactionId, RefundMerchantTransactionRequest refundMerchantTransactionRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = refundMerchantTransactionRequest;

        // create path and map variables
        String localVarPath = "/merchant/transactions/{transactionId}/refund"
            .replaceAll("\\{" + "transactionId" + "\\}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refundMerchantTransactionValidateBeforeCall(String transactionId, RefundMerchantTransactionRequest refundMerchantTransactionRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling refundMerchantTransaction(Async)");
        }
        
        // verify the required parameter 'refundMerchantTransactionRequest' is set
        if (refundMerchantTransactionRequest == null) {
            throw new ApiException("Missing the required parameter 'refundMerchantTransactionRequest' when calling refundMerchantTransaction(Async)");
        }
        

        okhttp3.Call localVarCall = refundMerchantTransactionCall(transactionId, refundMerchantTransactionRequest, _callback);
        return localVarCall;

    }

    /**
     * Refund Transaction
     * Refund a previously executed transaction
     * @param transactionId The ID of the specific transaction to reverse (required)
     * @param refundMerchantTransactionRequest  (required)
     * @return RefundMerchantTransactionResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The transaction specified doesn&#39;t exist or is a refund transaction already </td><td>  -  </td></tr>
     </table>
     */
    public RefundMerchantTransactionResults refundMerchantTransaction(String transactionId, RefundMerchantTransactionRequest refundMerchantTransactionRequest) throws ApiException {
        ApiResponse<RefundMerchantTransactionResults> localVarResp = refundMerchantTransactionWithHttpInfo(transactionId, refundMerchantTransactionRequest);
        return localVarResp.getData();
    }

    /**
     * Refund Transaction
     * Refund a previously executed transaction
     * @param transactionId The ID of the specific transaction to reverse (required)
     * @param refundMerchantTransactionRequest  (required)
     * @return ApiResponse&lt;RefundMerchantTransactionResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The transaction specified doesn&#39;t exist or is a refund transaction already </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RefundMerchantTransactionResults> refundMerchantTransactionWithHttpInfo(String transactionId, RefundMerchantTransactionRequest refundMerchantTransactionRequest) throws ApiException {
        okhttp3.Call localVarCall = refundMerchantTransactionValidateBeforeCall(transactionId, refundMerchantTransactionRequest, null);
        Type localVarReturnType = new TypeToken<RefundMerchantTransactionResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refund Transaction (asynchronously)
     * Refund a previously executed transaction
     * @param transactionId The ID of the specific transaction to reverse (required)
     * @param refundMerchantTransactionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The transaction specified doesn&#39;t exist or is a refund transaction already </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refundMerchantTransactionAsync(String transactionId, RefundMerchantTransactionRequest refundMerchantTransactionRequest, final ApiCallback<RefundMerchantTransactionResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = refundMerchantTransactionValidateBeforeCall(transactionId, refundMerchantTransactionRequest, _callback);
        Type localVarReturnType = new TypeToken<RefundMerchantTransactionResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setMerchantPreferences
     * @param merchantPreferences  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Preferences successfully updated.  No content returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setMerchantPreferencesCall(MerchantPreferences merchantPreferences, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = merchantPreferences;

        // create path and map variables
        String localVarPath = "/merchant/preferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setMerchantPreferencesValidateBeforeCall(MerchantPreferences merchantPreferences, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'merchantPreferences' is set
        if (merchantPreferences == null) {
            throw new ApiException("Missing the required parameter 'merchantPreferences' when calling setMerchantPreferences(Async)");
        }
        

        okhttp3.Call localVarCall = setMerchantPreferencesCall(merchantPreferences, _callback);
        return localVarCall;

    }

    /**
     * Set Preferences
     * Change the preferences for the customer or merchant (depending on calling identity)
     * @param merchantPreferences  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Preferences successfully updated.  No content returned </td><td>  -  </td></tr>
     </table>
     */
    public void setMerchantPreferences(MerchantPreferences merchantPreferences) throws ApiException {
        setMerchantPreferencesWithHttpInfo(merchantPreferences);
    }

    /**
     * Set Preferences
     * Change the preferences for the customer or merchant (depending on calling identity)
     * @param merchantPreferences  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Preferences successfully updated.  No content returned </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setMerchantPreferencesWithHttpInfo(MerchantPreferences merchantPreferences) throws ApiException {
        okhttp3.Call localVarCall = setMerchantPreferencesValidateBeforeCall(merchantPreferences, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set Preferences (asynchronously)
     * Change the preferences for the customer or merchant (depending on calling identity)
     * @param merchantPreferences  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Preferences successfully updated.  No content returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setMerchantPreferencesAsync(MerchantPreferences merchantPreferences, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setMerchantPreferencesValidateBeforeCall(merchantPreferences, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
