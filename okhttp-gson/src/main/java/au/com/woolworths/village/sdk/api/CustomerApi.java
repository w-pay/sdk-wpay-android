/*
 * Village Wallet
 * APIs for Village Wallet
 *
 * The version of the OpenAPI document: 0.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package au.com.woolworths.village.sdk.api;

import au.com.woolworths.village.sdk.client.ApiCallback;
import au.com.woolworths.village.sdk.client.ApiClient;
import au.com.woolworths.village.sdk.client.ApiException;
import au.com.woolworths.village.sdk.client.ApiResponse;
import au.com.woolworths.village.sdk.client.Configuration;
import au.com.woolworths.village.sdk.client.Pair;
import au.com.woolworths.village.sdk.client.ProgressRequestBody;
import au.com.woolworths.village.sdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import au.com.woolworths.village.sdk.dto.CustomerPaymentDetails;
import au.com.woolworths.village.sdk.dto.CustomerPreferences;
import au.com.woolworths.village.sdk.dto.CustomerPreferencesResult;
import au.com.woolworths.village.sdk.dto.Error;
import au.com.woolworths.village.sdk.dto.GetCustomerPaymentInstrumentsResults;
import au.com.woolworths.village.sdk.dto.GetCustomerPaymentResult;
import au.com.woolworths.village.sdk.dto.GetCustomerTransactionDetailsResults;
import au.com.woolworths.village.sdk.dto.GetCustomerTransactionsResult;
import au.com.woolworths.village.sdk.dto.InitiatePaymentInstrumentAdditionResults;
import au.com.woolworths.village.sdk.dto.InstrumentAdditionDetails;
import au.com.woolworths.village.sdk.dto.MakeCustomerPaymentResults;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomerApi {
    private ApiClient localVarApiClient;

    public CustomerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getCustomerPaymentDetailsByPaymentId
     * @param paymentRequestId The ID of the specific payment request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified Payment Request ID doesn&#39;t exist, has been used or is expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPaymentDetailsByPaymentIdCall(String paymentRequestId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customer/payments/{paymentRequestId}"
            .replaceAll("\\{" + "paymentRequestId" + "\\}", localVarApiClient.escapeString(paymentRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerPaymentDetailsByPaymentIdValidateBeforeCall(String paymentRequestId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentRequestId' is set
        if (paymentRequestId == null) {
            throw new ApiException("Missing the required parameter 'paymentRequestId' when calling getCustomerPaymentDetailsByPaymentId(Async)");
        }
        

        okhttp3.Call localVarCall = getCustomerPaymentDetailsByPaymentIdCall(paymentRequestId, _callback);
        return localVarCall;

    }

    /**
     * Get Payment Details
     * Get the details for a specific payment request so that the customer can pay using it
     * @param paymentRequestId The ID of the specific payment request (required)
     * @return GetCustomerPaymentResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified Payment Request ID doesn&#39;t exist, has been used or is expired </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomerPaymentResult getCustomerPaymentDetailsByPaymentId(String paymentRequestId) throws ApiException {
        ApiResponse<GetCustomerPaymentResult> localVarResp = getCustomerPaymentDetailsByPaymentIdWithHttpInfo(paymentRequestId);
        return localVarResp.getData();
    }

    /**
     * Get Payment Details
     * Get the details for a specific payment request so that the customer can pay using it
     * @param paymentRequestId The ID of the specific payment request (required)
     * @return ApiResponse&lt;GetCustomerPaymentResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified Payment Request ID doesn&#39;t exist, has been used or is expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCustomerPaymentResult> getCustomerPaymentDetailsByPaymentIdWithHttpInfo(String paymentRequestId) throws ApiException {
        okhttp3.Call localVarCall = getCustomerPaymentDetailsByPaymentIdValidateBeforeCall(paymentRequestId, null);
        Type localVarReturnType = new TypeToken<GetCustomerPaymentResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payment Details (asynchronously)
     * Get the details for a specific payment request so that the customer can pay using it
     * @param paymentRequestId The ID of the specific payment request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified Payment Request ID doesn&#39;t exist, has been used or is expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPaymentDetailsByPaymentIdAsync(String paymentRequestId, final ApiCallback<GetCustomerPaymentResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerPaymentDetailsByPaymentIdValidateBeforeCall(paymentRequestId, _callback);
        Type localVarReturnType = new TypeToken<GetCustomerPaymentResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomerPaymentDetailsByQRCodeId
     * @param qrId The ID of the specific QR Code (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified QR Code ID doesn&#39;t exist or has been expired or the underlying payment request is no longer usable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPaymentDetailsByQRCodeIdCall(String qrId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customer/qr/{qrId}"
            .replaceAll("\\{" + "qrId" + "\\}", localVarApiClient.escapeString(qrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerPaymentDetailsByQRCodeIdValidateBeforeCall(String qrId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'qrId' is set
        if (qrId == null) {
            throw new ApiException("Missing the required parameter 'qrId' when calling getCustomerPaymentDetailsByQRCodeId(Async)");
        }
        

        okhttp3.Call localVarCall = getCustomerPaymentDetailsByQRCodeIdCall(qrId, _callback);
        return localVarCall;

    }

    /**
     * Get Payment From QR
     * Get the details for a specific payment from a QR Code ID so that the customer can pay using it
     * @param qrId The ID of the specific QR Code (required)
     * @return GetCustomerPaymentResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified QR Code ID doesn&#39;t exist or has been expired or the underlying payment request is no longer usable </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomerPaymentResult getCustomerPaymentDetailsByQRCodeId(String qrId) throws ApiException {
        ApiResponse<GetCustomerPaymentResult> localVarResp = getCustomerPaymentDetailsByQRCodeIdWithHttpInfo(qrId);
        return localVarResp.getData();
    }

    /**
     * Get Payment From QR
     * Get the details for a specific payment from a QR Code ID so that the customer can pay using it
     * @param qrId The ID of the specific QR Code (required)
     * @return ApiResponse&lt;GetCustomerPaymentResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified QR Code ID doesn&#39;t exist or has been expired or the underlying payment request is no longer usable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCustomerPaymentResult> getCustomerPaymentDetailsByQRCodeIdWithHttpInfo(String qrId) throws ApiException {
        okhttp3.Call localVarCall = getCustomerPaymentDetailsByQRCodeIdValidateBeforeCall(qrId, null);
        Type localVarReturnType = new TypeToken<GetCustomerPaymentResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payment From QR (asynchronously)
     * Get the details for a specific payment from a QR Code ID so that the customer can pay using it
     * @param qrId The ID of the specific QR Code (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The specified QR Code ID doesn&#39;t exist or has been expired or the underlying payment request is no longer usable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPaymentDetailsByQRCodeIdAsync(String qrId, final ApiCallback<GetCustomerPaymentResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerPaymentDetailsByQRCodeIdValidateBeforeCall(qrId, _callback);
        Type localVarReturnType = new TypeToken<GetCustomerPaymentResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomerPaymentInstruments
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPaymentInstrumentsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customer/instruments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerPaymentInstrumentsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCustomerPaymentInstrumentsCall(_callback);
        return localVarCall;

    }

    /**
     * Get Payment Instruments
     * Get the list of payment instruments currently configured for the customer.  Returns an array of instrument records that can be used to execute payments
     * @return GetCustomerPaymentInstrumentsResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomerPaymentInstrumentsResults getCustomerPaymentInstruments() throws ApiException {
        ApiResponse<GetCustomerPaymentInstrumentsResults> localVarResp = getCustomerPaymentInstrumentsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Payment Instruments
     * Get the list of payment instruments currently configured for the customer.  Returns an array of instrument records that can be used to execute payments
     * @return ApiResponse&lt;GetCustomerPaymentInstrumentsResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCustomerPaymentInstrumentsResults> getCustomerPaymentInstrumentsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCustomerPaymentInstrumentsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetCustomerPaymentInstrumentsResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payment Instruments (asynchronously)
     * Get the list of payment instruments currently configured for the customer.  Returns an array of instrument records that can be used to execute payments
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPaymentInstrumentsAsync(final ApiCallback<GetCustomerPaymentInstrumentsResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerPaymentInstrumentsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetCustomerPaymentInstrumentsResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomerPreferences
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPreferencesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customer/preferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerPreferencesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCustomerPreferencesCall(_callback);
        return localVarCall;

    }

    /**
     * Get Preferences
     * Get the preferences previously set by the customer or merchant (depending on calling identity)
     * @return CustomerPreferencesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CustomerPreferencesResult getCustomerPreferences() throws ApiException {
        ApiResponse<CustomerPreferencesResult> localVarResp = getCustomerPreferencesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Preferences
     * Get the preferences previously set by the customer or merchant (depending on calling identity)
     * @return ApiResponse&lt;CustomerPreferencesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerPreferencesResult> getCustomerPreferencesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCustomerPreferencesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CustomerPreferencesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Preferences (asynchronously)
     * Get the preferences previously set by the customer or merchant (depending on calling identity)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPreferencesAsync(final ApiCallback<CustomerPreferencesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerPreferencesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CustomerPreferencesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomerTransactionDetails
     * @param transactionId The ID of the specific transaction (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerTransactionDetailsCall(String transactionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customer/transactions/{transactionId}"
            .replaceAll("\\{" + "transactionId" + "\\}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerTransactionDetailsValidateBeforeCall(String transactionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling getCustomerTransactionDetails(Async)");
        }
        

        okhttp3.Call localVarCall = getCustomerTransactionDetailsCall(transactionId, _callback);
        return localVarCall;

    }

    /**
     * Get Transaction Details
     * Get the details for a specific transaction previously executed by the customer.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
     * @param transactionId The ID of the specific transaction (required)
     * @return GetCustomerTransactionDetailsResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomerTransactionDetailsResults getCustomerTransactionDetails(String transactionId) throws ApiException {
        ApiResponse<GetCustomerTransactionDetailsResults> localVarResp = getCustomerTransactionDetailsWithHttpInfo(transactionId);
        return localVarResp.getData();
    }

    /**
     * Get Transaction Details
     * Get the details for a specific transaction previously executed by the customer.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
     * @param transactionId The ID of the specific transaction (required)
     * @return ApiResponse&lt;GetCustomerTransactionDetailsResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCustomerTransactionDetailsResults> getCustomerTransactionDetailsWithHttpInfo(String transactionId) throws ApiException {
        okhttp3.Call localVarCall = getCustomerTransactionDetailsValidateBeforeCall(transactionId, null);
        Type localVarReturnType = new TypeToken<GetCustomerTransactionDetailsResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transaction Details (asynchronously)
     * Get the details for a specific transaction previously executed by the customer.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
     * @param transactionId The ID of the specific transaction (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerTransactionDetailsAsync(String transactionId, final ApiCallback<GetCustomerTransactionDetailsResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerTransactionDetailsValidateBeforeCall(transactionId, _callback);
        Type localVarReturnType = new TypeToken<GetCustomerTransactionDetailsResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomerTransactions
     * @param startTime If present, the date/time to limit transactions returned.  Transactions older than this time will not be returned (optional)
     * @param endTime If present, the date/time to limit transactions returned.  Transactions newer than this time will not be returned (optional)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerTransactionsCall(OffsetDateTime startTime, OffsetDateTime endTime, Integer pageSize, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customer/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end-time", endTime));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page-size", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerTransactionsValidateBeforeCall(OffsetDateTime startTime, OffsetDateTime endTime, Integer pageSize, Integer page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCustomerTransactionsCall(startTime, endTime, pageSize, page, _callback);
        return localVarCall;

    }

    /**
     * Get Transaction List
     * Get a list of the previously executed transactions for the customer.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
     * @param startTime If present, the date/time to limit transactions returned.  Transactions older than this time will not be returned (optional)
     * @param endTime If present, the date/time to limit transactions returned.  Transactions newer than this time will not be returned (optional)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @return GetCustomerTransactionsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomerTransactionsResult getCustomerTransactions(OffsetDateTime startTime, OffsetDateTime endTime, Integer pageSize, Integer page) throws ApiException {
        ApiResponse<GetCustomerTransactionsResult> localVarResp = getCustomerTransactionsWithHttpInfo(startTime, endTime, pageSize, page);
        return localVarResp.getData();
    }

    /**
     * Get Transaction List
     * Get a list of the previously executed transactions for the customer.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
     * @param startTime If present, the date/time to limit transactions returned.  Transactions older than this time will not be returned (optional)
     * @param endTime If present, the date/time to limit transactions returned.  Transactions newer than this time will not be returned (optional)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @return ApiResponse&lt;GetCustomerTransactionsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCustomerTransactionsResult> getCustomerTransactionsWithHttpInfo(OffsetDateTime startTime, OffsetDateTime endTime, Integer pageSize, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getCustomerTransactionsValidateBeforeCall(startTime, endTime, pageSize, page, null);
        Type localVarReturnType = new TypeToken<GetCustomerTransactionsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transaction List (asynchronously)
     * Get a list of the previously executed transactions for the customer.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
     * @param startTime If present, the date/time to limit transactions returned.  Transactions older than this time will not be returned (optional)
     * @param endTime If present, the date/time to limit transactions returned.  Transactions newer than this time will not be returned (optional)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerTransactionsAsync(OffsetDateTime startTime, OffsetDateTime endTime, Integer pageSize, Integer page, final ApiCallback<GetCustomerTransactionsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerTransactionsValidateBeforeCall(startTime, endTime, pageSize, page, _callback);
        Type localVarReturnType = new TypeToken<GetCustomerTransactionsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for initiatePaymentInstrumentAddition
     * @param instrumentAdditionDetails  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initiatePaymentInstrumentAdditionCall(InstrumentAdditionDetails instrumentAdditionDetails, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = instrumentAdditionDetails;

        // create path and map variables
        String localVarPath = "/customer/instruments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initiatePaymentInstrumentAdditionValidateBeforeCall(InstrumentAdditionDetails instrumentAdditionDetails, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'instrumentAdditionDetails' is set
        if (instrumentAdditionDetails == null) {
            throw new ApiException("Missing the required parameter 'instrumentAdditionDetails' when calling initiatePaymentInstrumentAddition(Async)");
        }
        

        okhttp3.Call localVarCall = initiatePaymentInstrumentAdditionCall(instrumentAdditionDetails, _callback);
        return localVarCall;

    }

    /**
     * Initiate Instrument Addition
     * Initiate the addition of a new payment instrument for this customer.  This API returns a URL to be used to access the DigiPay IFrame based interface to request the customer to enter a payment instrument details.
     * @param instrumentAdditionDetails  (required)
     * @return InitiatePaymentInstrumentAdditionResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public InitiatePaymentInstrumentAdditionResults initiatePaymentInstrumentAddition(InstrumentAdditionDetails instrumentAdditionDetails) throws ApiException {
        ApiResponse<InitiatePaymentInstrumentAdditionResults> localVarResp = initiatePaymentInstrumentAdditionWithHttpInfo(instrumentAdditionDetails);
        return localVarResp.getData();
    }

    /**
     * Initiate Instrument Addition
     * Initiate the addition of a new payment instrument for this customer.  This API returns a URL to be used to access the DigiPay IFrame based interface to request the customer to enter a payment instrument details.
     * @param instrumentAdditionDetails  (required)
     * @return ApiResponse&lt;InitiatePaymentInstrumentAdditionResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InitiatePaymentInstrumentAdditionResults> initiatePaymentInstrumentAdditionWithHttpInfo(InstrumentAdditionDetails instrumentAdditionDetails) throws ApiException {
        okhttp3.Call localVarCall = initiatePaymentInstrumentAdditionValidateBeforeCall(instrumentAdditionDetails, null);
        Type localVarReturnType = new TypeToken<InitiatePaymentInstrumentAdditionResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initiate Instrument Addition (asynchronously)
     * Initiate the addition of a new payment instrument for this customer.  This API returns a URL to be used to access the DigiPay IFrame based interface to request the customer to enter a payment instrument details.
     * @param instrumentAdditionDetails  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initiatePaymentInstrumentAdditionAsync(InstrumentAdditionDetails instrumentAdditionDetails, final ApiCallback<InitiatePaymentInstrumentAdditionResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = initiatePaymentInstrumentAdditionValidateBeforeCall(instrumentAdditionDetails, _callback);
        Type localVarReturnType = new TypeToken<InitiatePaymentInstrumentAdditionResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for makeCustomerPayment
     * @param paymentRequestId The ID of the specific payment request (required)
     * @param customerPaymentDetails  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call makeCustomerPaymentCall(String paymentRequestId, CustomerPaymentDetails customerPaymentDetails, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = customerPaymentDetails;

        // create path and map variables
        String localVarPath = "/customer/payments/{paymentRequestId}"
            .replaceAll("\\{" + "paymentRequestId" + "\\}", localVarApiClient.escapeString(paymentRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call makeCustomerPaymentValidateBeforeCall(String paymentRequestId, CustomerPaymentDetails customerPaymentDetails, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentRequestId' is set
        if (paymentRequestId == null) {
            throw new ApiException("Missing the required parameter 'paymentRequestId' when calling makeCustomerPayment(Async)");
        }
        
        // verify the required parameter 'customerPaymentDetails' is set
        if (customerPaymentDetails == null) {
            throw new ApiException("Missing the required parameter 'customerPaymentDetails' when calling makeCustomerPayment(Async)");
        }
        

        okhttp3.Call localVarCall = makeCustomerPaymentCall(paymentRequestId, customerPaymentDetails, _callback);
        return localVarCall;

    }

    /**
     * Pay Payment
     * Pay a specific payment using the instrument details provided
     * @param paymentRequestId The ID of the specific payment request (required)
     * @param customerPaymentDetails  (required)
     * @return MakeCustomerPaymentResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public MakeCustomerPaymentResults makeCustomerPayment(String paymentRequestId, CustomerPaymentDetails customerPaymentDetails) throws ApiException {
        ApiResponse<MakeCustomerPaymentResults> localVarResp = makeCustomerPaymentWithHttpInfo(paymentRequestId, customerPaymentDetails);
        return localVarResp.getData();
    }

    /**
     * Pay Payment
     * Pay a specific payment using the instrument details provided
     * @param paymentRequestId The ID of the specific payment request (required)
     * @param customerPaymentDetails  (required)
     * @return ApiResponse&lt;MakeCustomerPaymentResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MakeCustomerPaymentResults> makeCustomerPaymentWithHttpInfo(String paymentRequestId, CustomerPaymentDetails customerPaymentDetails) throws ApiException {
        okhttp3.Call localVarCall = makeCustomerPaymentValidateBeforeCall(paymentRequestId, customerPaymentDetails, null);
        Type localVarReturnType = new TypeToken<MakeCustomerPaymentResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Pay Payment (asynchronously)
     * Pay a specific payment using the instrument details provided
     * @param paymentRequestId The ID of the specific payment request (required)
     * @param customerPaymentDetails  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call makeCustomerPaymentAsync(String paymentRequestId, CustomerPaymentDetails customerPaymentDetails, final ApiCallback<MakeCustomerPaymentResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = makeCustomerPaymentValidateBeforeCall(paymentRequestId, customerPaymentDetails, _callback);
        Type localVarReturnType = new TypeToken<MakeCustomerPaymentResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setCustomerPreferences
     * @param customerPreferences  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Preferences successfully updated.  No content returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setCustomerPreferencesCall(CustomerPreferences customerPreferences, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = customerPreferences;

        // create path and map variables
        String localVarPath = "/customer/preferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setCustomerPreferencesValidateBeforeCall(CustomerPreferences customerPreferences, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'customerPreferences' is set
        if (customerPreferences == null) {
            throw new ApiException("Missing the required parameter 'customerPreferences' when calling setCustomerPreferences(Async)");
        }
        

        okhttp3.Call localVarCall = setCustomerPreferencesCall(customerPreferences, _callback);
        return localVarCall;

    }

    /**
     * Set Preferences
     * Change the preferences for the customer or merchant (depending on calling identity)
     * @param customerPreferences  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Preferences successfully updated.  No content returned </td><td>  -  </td></tr>
     </table>
     */
    public void setCustomerPreferences(CustomerPreferences customerPreferences) throws ApiException {
        setCustomerPreferencesWithHttpInfo(customerPreferences);
    }

    /**
     * Set Preferences
     * Change the preferences for the customer or merchant (depending on calling identity)
     * @param customerPreferences  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Preferences successfully updated.  No content returned </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setCustomerPreferencesWithHttpInfo(CustomerPreferences customerPreferences) throws ApiException {
        okhttp3.Call localVarCall = setCustomerPreferencesValidateBeforeCall(customerPreferences, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set Preferences (asynchronously)
     * Change the preferences for the customer or merchant (depending on calling identity)
     * @param customerPreferences  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Preferences successfully updated.  No content returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setCustomerPreferencesAsync(CustomerPreferences customerPreferences, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setCustomerPreferencesValidateBeforeCall(customerPreferences, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
