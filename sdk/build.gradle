plugins {
    id 'org.openapi.generator' version '4.3.0'
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "0.0.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    setProperty("archivesBaseName", "village-${archivesBaseName}-${defaultConfig.versionName}")
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

def libraries = [ "okhttp-gson" ]

libraries.each { lib ->
    def name = lib.split("-")
                .collect({ s -> "${Character.toUpperCase(s.charAt(0))}${s.substring(1).toLowerCase()}" })
                .join("")

    task ("generate${name}Sdk", type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
        group = "SDK Generators"
        description = "Generates the Village SDK using the ${lib} framework"
        generatorName = "java"
        validateSpec = true
        library = lib

        inputSpec = "$rootDir/sdk/village.json".toString()
        outputDir = "${rootDir}/${library.get()}".toString()

        groupId = rootProject.ext.packageName
        id = "sdk-${lib}"
        packageName = "${rootProject.ext.packageName}.sdk"
        apiPackage = "${packageName.get()}.api"
        invokerPackage = "${packageName.get()}.client"
        modelPackage = "${packageName.get()}.dto"

        generateModelTests = false
        generateModelDocumentation = false
        generateApiTests = false
    }
}
