// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.3.72'

    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id 'project-report'
    id 'org.openapi.generator' version '4.3.0'
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

htmlDependencyReport {
    projects = project.allprojects
}

ext {
    packageName = "au.com.woolworths.village"
    spec = "$projectDir/village.json".toString()

    minSdkVersion = 21
    targetSdkVersion = 28
    buildToolsVersion = "29.0.3"
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

openApiValidate {
    inputSpec = project.ext.spec
}

def pascalCase = {
    return it
        .split("-")
        .collect({ s -> "${Character.toUpperCase(s.charAt(0))}${s.substring(1).toLowerCase()}" })
        .join("")
}

def camelCase = { it ->
    def pc = pascalCase(it)
    return "${pc[0].toLowerCase()}${pc.substring(1)}"
}

def libraries = [ "okhttp-gson" ]
def sdkTestsProject = null
def evaluatedProjects = []

def createSdkFlavor = { prj ->
    logger.info("Creating SDK flavor for ${prj.path}")

    project.configure(sdkTestsProject, {
        android {
            productFlavors.create("${camelCase(prj.name)}", {})
        }

        /*
         * Add the SDK project as a dependency for the flavour testing
         */
        dependencies {
            "test${pascalCase(prj.name)}Implementation" prj
        }
    })
}

/*
 * Configure the SDK tests project to have a flavour for each SDK variant.
 *
 * See the README for further explanation.
 */
subprojects.each { sub ->
    /*
     * The project configuration eg: the "android" block has to be evaluated first so that we can
     * manipulate it.
     */
    sub.afterEvaluate { prj ->
        /*
         * Because we don't know the order Gradle will evaluate (load) sub projects we can't guarantee
         * that the SDK tests project will have been evaluated when other sub projects are. What we
         * therefore do is:
         *
         * 1. If the SDK tests project has been evaluated, create a flavour for the newly evaluated project.
         * 2. If not (1) save the project for later.
         * 3. If the newly evaluated project is the SDK tests, create a flavour for any previously saved projects.
         */
        logger.debug("${prj.path} is evaluated")

        if (prj.path == ":sdk-tests") {
            logger.debug("${prj.path} is evaluated; creating flavours for any saved projects")
            sdkTestsProject = prj

            evaluatedProjects.each(createSdkFlavor)
        }
        else {
            if (sdkTestsProject != null) {
                createSdkFlavor(prj)
            }
            else {
                logger.debug("Saving ${prj.path} for later configuration")

                evaluatedProjects.add(prj)
            }
        }
    }
}

libraries.each { lib ->
    def name = pascalCase(lib)

    def outputLoc = "${projectDir}/${lib}".toString()

    task("generate${name}Sdk", type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
        group = "SDK Generators"
        description = "Generates the Village SDK using the ${lib} framework"
        generatorName = "java"
        validateSpec = true
        library = lib

        inputSpec = project.ext.spec
        outputDir = outputLoc

        groupId = project.ext.packageName
        id = "sdk-${lib}"
        packageName = "${project.ext.packageName}.sdk"
        apiPackage = "${packageName.get()}.api"
        invokerPackage = "${packageName.get()}.client"
        modelPackage = "${packageName.get()}.dto"

        generateModelTests = false
        generateModelDocumentation = false
        generateApiTests = false

        configOptions = [
            hideGenerationTimestamp: "true"
        ]
    }
}
